{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}
{\f34\froman\fcharset238\fprq2 Times New Roman CE;}{\f35\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f37\froman\fcharset161\fprq2 Times New Roman Greek;}{\f38\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f39\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f40\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f41\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f42\fswiss\fcharset238\fprq2 Arial CE;}{\f43\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f45\fswiss\fcharset161\fprq2 Arial Greek;}{\f46\fswiss\fcharset162\fprq2 Arial Tur;}{\f47\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f48\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f49\fswiss\fcharset186\fprq2 Arial Baltic;}
{\f50\fmodern\fcharset238\fprq1 Courier New CE;}{\f51\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f53\fmodern\fcharset161\fprq1 Courier New Greek;}{\f54\fmodern\fcharset162\fprq1 Courier New Tur;}{\f55\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f56\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f57\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\ql \li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 
\f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 Body Text 2;}{\s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext16 Body Text;}{
\s17\ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext17 Body Text Indent 2;}{\s18\ql \fi-720\li1080\ri0\nowidctlpar\faauto\rin0\lin1080\itap0 
\f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext18 Body Text Indent 3;}{\*\cs19 \additive \b \sbasedon10 Strong;}}{\*\listtable{\list\listtemplateid1875908404\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0
\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li720\jclisttab\tx720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'01.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc2\levelnfcn2\leveljc2
\leveljcn2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li2160\jclisttab\tx2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc4\levelnfcn4\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'04.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc2\levelnfcn2\leveljc2
\leveljcn2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li4320\jclisttab\tx4320 }{\listlevel\levelnfc0\levelnfcn0\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc4\levelnfcn4\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'07.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc2\levelnfcn2\leveljc2
\leveljcn2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li6480\jclisttab\tx6480 }{\listname ;}\listid828444423}
{\list\listtemplateid1356634338\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li360\jclisttab\tx360 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1080\jclisttab\tx1080 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1800\jclisttab\tx1800 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2520\jclisttab\tx2520 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3240\jclisttab\tx3240 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3960\jclisttab\tx3960 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4680\jclisttab\tx4680 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5400\jclisttab\tx5400 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6120\jclisttab\tx6120 }
{\listname ;}\listid829564293}}{\*\listoverridetable{\listoverride\listid828444423\listoverridecount0\ls1}{\listoverride\listid829564293\listoverridecount0\ls2}}{\info{\author Zane Wagner}{\operator Zane Wagner}{\creatim\yr2004\mo5\dy13\hr19\min37}
{\revtim\yr2004\mo5\dy13\hr22\min16}{\version18}{\edmins121}{\nofpages3}{\nofwords1065}{\nofchars6074}{\*\company  }{\nofcharsws7459}{\vern8247}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120
\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale100\nolnhtadjtbl \fet0\sectd \linex0\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f1\fs20 [Table of Contents]
\par }\pard \ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 {\f1\fs20 i.\tab Introduction
\par ii.\tab Updates
\par iii.\tab Known Bugs
\par 1.\tab Server Description
\par 2.\tab The REALM Server
\par {\listtext\pard\plain\f1\fs20 \hich\af1\dbch\af0\loch\f1 3.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\jclisttab\tx720\faauto\ls1\rin0\lin720\itap0 {\f1\fs20 The WORLD Server
\par }\pard \ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 {\f1\fs20 4.\tab Object Management
\par 
\par GPL Notice
\par Credits
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20 
\par }{\b\f1\fs20 [i. Introduction]
\par }\pard\plain \s15\ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Welcome to GhostCraft, the open source VB6 server for World of Warcraft. 
GhostCraft is an opportunity for any VB6 developer to get a head start on creating his or her own server. In addition, as these respective developers update and add features to the code, the updates they submit to the community will be incorporated into t
he base source code: thus, the server will grow incrementally, adding new features with every update.
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20 
\par }{\b\f1\fs20 [ii. Updates]
\par }\pard \ql \fi-360\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 {\b\f1\fs20 [5/13/04] v0.1.43}{\f1\fs20 \line Replaced all instances of \lquote receive\rquote  with \lquote receive\rquote  in the source code.\line 
Changed the way the update fields worked \endash  see }{\b\f1\fs20 Section 4. Object Management}{\f1\fs20 .\line Removed some unused variables (variables which were declared and never used).\line Wrote this readme.\line 
Placed the source code under the GPL.\line The source code originally had two ways of reading GUIDs from a received packet: an older way a
nd a newer way which I had forgotten to implement in every single routine. I made sure that the newer way was used every time, and got rid of the code and variables that were used in the older method.
\par }{\b\f1\fs20 [5/12/04] v0.1.41}{\f1\fs20 \line Vjeux posts his updated version that fixes the Winsock error.
\par }\pard\plain \s18\ql \fi-360\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b [5/06/04] v0.1.40}{\line 
Original server posted; unfortunately, there is an error in the Winsock class that keeps the server from sending any packets back to the client.
\par 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f1\fs20 [iii. Known Bugs]
\par {\listtext\pard\plain\s18 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s18\ql \fi-360\li720\ri0\nowidctlpar\faauto\ls2\rin0\lin720\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
If two players log on with the same account, the second player will crash. Solution: make sure a player cannot double-login with one account.
\par {\listtext\pard\plain\s18 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}If a player crashes, his character will remain logged in until the server shuts down. The best way to fix this problem would be to record the time every time the p
layer sends a packet to the server. Then, every 60 seconds, loop through the list of accounts, and force log off any accounts that have not sent a packet in, say, three minutes (the WoW client sends packets much more frequently than this, so perhaps one m
inute would be appropriate).
\par {\listtext\pard\plain\s18 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}
Right now, all update fields will be sent to all players. Solution: the update field type already contains a Boolean field called UpdateFieldIsPrivate. Make sure that the update fields with this Boolean set to true get sent in a
 separate A9 packet only to the player they belong to.
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20 
\par }{\b\f1\fs20 [1. Server Description]
\par }\pard \ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 {\f1\fs20 At the simplest level, GhostCraft is an open source VB6 server for WoW. But you already know that. In this section, I'll get into describing how the server actually works.
\par 
\par }\pard\plain \s16\ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Gho
stCraft is based on an easily extensible in-memory framework, which allows you to very quickly send object update (A9) packets by simply copying long integers (long) from the places specified by the A9 packet itself. In layman's terms: the in-memory datab
a
se which keeps all the information about each object, item, player, npc, and so on, is nothing more than an a list of all the A9 update fields in sequence. So, if you want to send a player the number of skill points he has (update field #616), you tell th
e
 server to send that player an A9 packet with update field #616 in it, and the server actually copies the 616th long integer from that player's database entry to the packet and sends it off. This information comes in handy for two reasons: first off, the 
A
9 packet structure has been updated for Beta2, and no doubt some of the fields have been shifted around, so now you know how the update fields are stored and how they'll need to be changed to fit in with Beta2. The second reason is much simpler: because o
f this in-memory database, composing A9 packets is incredibly fast, and once you get the hang of knowing which update fields are necessary, you'll easily be able to send new A9 packets.
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20 
\par }{\b\f1\fs20 [2. The REALM Server]
\par }\pard \ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 {\f1\fs20 All the routines for receiving and responding to
 client packets send to the REALM server can be found in the code module REALMPackets. The packet parsing routines for the REALM server are very similar to the WORLD server routines, so studying these routines will help us when we begin studying the WORLD
 server in more depth.
\par 
\par Upon receiving a packet sent to the REALM server, the packet is forwarded to the subroutine (sub) REALM_ParsePacket.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20 
\par }\pard\plain \s16\ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2 Public Sub REALM_ParsePacket(receivedPacket As String, link As Long)
\par 
\par }{The received packet is passed as a string, and link is the link number on the REALM server that sent the original packet. When you respond to that client, you will use the \lquote link\rquote  number provided by the REALM_ParsePacket routine.
\par 
\par As you can see, the routine first gets the packet length, and then take
s the opcode of the packet. It then selects what it should do to that packet, based on the opcode. The rest of the functions should be obvious in their function, but if you need any additional help, feel free to post on the GotWoW forums, and I\rquote 
m sure someone will be happy to help.
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20 
\par }{\b\f1\fs20 [3. The World Server]
\par }\pard\plain \s16\ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The WORLD server works in a similar fashion as the REALM server: once a packet is received, it is forwarded to the sub WORLD_ParsePacket.
\par 
\par }{\f2 Public Sub WORLD_ParsePacket(receivedPacket As String, link As Long)
\par }{
\par Based on the opcode of the received packet, the server selects a routine to handle the packet. For example, if the opcode is &H36 (54 in decimal) \endash 
 the opcode for a character creation packet - we use the routine WORLD_CreateCharacter. Simple, eh? All of the routines in GhostCraft have been named so that it\rquote s quite obvious what they do.
\par 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f1\fs20 [4. Object Management]
\par }\pard\plain \s16\ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
As mentioned above, the server keeps a list of all the update fields of each object on the server, whether that be a player, item, monster, npc, et
c. A list of all the update fields can be found in the code module ObjectManagement_Variables. You can see, by browsing through this file, that each type of object is made up of several pieces: for example, the tObject_Unit_Player_Complete object is made 
up of a tObject_Base object, a tObject_Unit object, and a tObject_Unit_Player object.
\par 
\par If you know the format of the A9 packet, you\rquote ll recognize that these are the same objects that make up the actual A9 packet update fields: a monster or npc only needs tOb
ject_Base and tObject_Unit, while a player object needs the additional update fields provided by tObject_Unit_Player.
\par 
\par Now that this object is created, you need to update its fields whenever anything changes. For example, when the player loses health, you 
need to update the 22nd field (f022_HEALTH in tObject_Unit). Right now, you need to make the updates in two stages: first you update the actual value:
\par 
\par }{\b Object_Unit_Player_Collection.Objects(recordnumber).Unit.f022_HEALTH = 68
\par }{
\par And then you need to notify the server that when it sends out its next A9 packet for that player, it needs to include field 022. You do this by first declaring a temporary update list:
\par 
\par }{\b Dim tmpUpdateList As tUpdateFields
\par }{
\par Then adding field 22 to the temporary update list (you also declare at this point whether the field should be private or not, with private fields only sent to that player):
\par 
\par }{\b AddUpdateFieldToTemporaryUpdateList tmpUpdateList, 22, False
\par }{
\par Then, you finally add the contents of the temporary update list to the main update list (the list that is checked every time an A9 packet is sent out).
\par 
\par }{\b AddUpdateFields playerGUID, tmpUpdateList
\par }{
\par Complicated, eh? Yeah, unfortunate, but true. I think it would be much better if you only had to call one function to add an update field. However, the way its set up right now, it\rquote s very optimized
: replacing those three steps with only one would slow it down by a small amount. I\rquote ll be working on a replacement.
\par 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f1\fs20 [GPL Notice]
\par }\pard \ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 {\f1\fs20 This program is free software; you can redist
ribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
\par 
\par This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
\par 
\par You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20 
\par }{\b\f1\fs20 [Credits]
\par }\pard\plain \s17\ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 \f1\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The original version of GhostCraft was programmed by AndOrAFK and submitted to the GotWoW forums by the same. However, there w
as an error in the original version that kept the server from passing packets to the server. A change in the Winsock control class was necessary so that the server could properly pass information to clients. This change was noted by Grimtrall - he's the r
eason this server actually works as intended: props to him. :)
\par }}