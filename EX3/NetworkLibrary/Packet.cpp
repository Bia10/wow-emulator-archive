// (c) AbyssX Group
#include "NetworkEnvironment.h"

Packet::Packet()
{
}

Packet::~Packet()
{
}

bool Packet::FromInput(Client *cli)
{
	if (cli->GetInBuffer().length() < 6)
		return false; // need at least 2 byte len and 4 byte opcode

	memcpy(&mPacket.len, cli->GetInBuffer().c_str(), 2);
	mPacket.len = ntohs(mPacket.len);
	if (cli->GetInBuffer().length() < mPacket.len)
		return false; // don't have the complete packet yet
	if ((mPacket.len - 4) > (Word) sizeof(mPacket.data))
		return false; // can't handle packets that large
	
	memcpy(&mPacket.opcode, cli->GetInBuffer().substr(2).c_str(), 4);
	if (mPacket.len > 4)
		memcpy(&mPacket.data, cli->GetInBuffer().substr(6).c_str(), mPacket.len - 4);

	cli->GetInBuffer().erase(0, mPacket.len + 2);

	return true;
}

void Packet::Debug(char *logname)
{
	Word i;

	LogManager::GetSingleton().Log(logname, "Packet Len: %X (%d)\n", mPacket.len+4,
		mPacket.len+4);
	LogManager::GetSingleton().Log(logname, "Opcode: %X\n", mPacket.opcode);
	LogManager::GetSingleton().Log(logname, "Data Len: %X (%d)\n", mPacket.len,
		mPacket.len);
	LogManager::GetSingleton().Log(logname, "Data Follows:\n");

	for (i = 0; i < mPacket.len; i++)
	{
		LogManager::GetSingleton().Log(logname, "%02X ", mPacket.data[i]);
		if ((i % 8) == 7)
			LogManager::GetSingleton().Log(logname, "\n");
	}
	LogManager::GetSingleton().Log(logname, "\n\n");

}

void Packet::Build(Word op)
{
	mPacket.opcode = op;
	mPacket.len = 0;
}

void Packet::AddByte(Byte d)
{
	mPacket.data[mPacket.len++] = d;
}

void Packet::AddBytes(Byte *d, Word len)
{
	Word x;
	
	for (x = 0; x < len; x++)
		mPacket.data[mPacket.len++] = d[x];
}

void Packet::AddWord(Word d)
{
	mPacket.data[mPacket.len++] = (Byte)((d & 0x00FF) >> 0);
	mPacket.data[mPacket.len++] = (Byte)((d & 0xFF00) >> 8);
}

void Packet::AddDoubleWord(DoubleWord d)
{
	mPacket.data[mPacket.len++] = (Byte)((d & 0x000000FF) >> 0);
	mPacket.data[mPacket.len++] = (Byte)((d & 0x0000FF00) >> 8);
	mPacket.data[mPacket.len++] = (Byte)((d & 0x00FF0000) >> 16);
	mPacket.data[mPacket.len++] = (Byte)((d & 0xFF000000) >> 24);
}

void Packet::AddQuadWord(QuadWord q)
{
	mPacket.data[mPacket.len++] = (Byte)((q & 0x000000FF) >> 0);
	mPacket.data[mPacket.len++] = (Byte)((q & 0x0000FF00) >> 8);
	mPacket.data[mPacket.len++] = (Byte)((q & 0x00FF0000) >> 16);
	mPacket.data[mPacket.len++] = (Byte)((q & 0xFF000000) >> 24);
	q = q >> 32;
	mPacket.data[mPacket.len++] = (Byte)((q & 0x000000FF) >> 0);
	mPacket.data[mPacket.len++] = (Byte)((q & 0x0000FF00) >> 8);
	mPacket.data[mPacket.len++] = (Byte)((q & 0x00FF0000) >> 16);
	mPacket.data[mPacket.len++] = (Byte)((q & 0xFF000000) >> 24);
}

void Packet::AddFloat(Float d)
{
	Byte *b;

	b = (unsigned char *)&d;
	mPacket.data[mPacket.len++] = b[0];
	mPacket.data[mPacket.len++] = b[1];
	mPacket.data[mPacket.len++] = b[2];
	mPacket.data[mPacket.len++] = b[3];
}

void Packet::AddObjectUpdate(ObjectUpdate *objupd)
{
	mPacket.len += objupd->WriteTo(mPacket.data + mPacket.len);
}

DoubleWord Packet::GetOpCode(void)
{
	return mPacket.opcode;
}

Word Packet::GetDataLength(void)
{
	return mPacket.len;
}

Word Packet::GetByteAfterString(Word byte)
{
	while (mPacket.data[byte] != 0x00)
		byte++;
	return byte + 1;
}

Byte Packet::GetByte(Word byte)
{
	return mPacket.data[byte];
}

Byte *Packet::GetBytes(Word byte)
{
	return mPacket.data + byte;
}

Word Packet::GetWord(Word byte)
{
	return *((Word *)(mPacket.data + byte));
}

DoubleWord Packet::GetDoubleWord(Word byte)
{
	return *((DoubleWord *)(mPacket.data + byte));
}

QuadWord Packet::GetQuadWord(Word byte)
{
	return *((QuadWord *)(mPacket.data + byte));
}

Float Packet::GetFloat(Word byte)
{
	return *((Float *)(mPacket.data + byte));
}

void Packet::QuickCopy(Packet *pack)
{
	mPacket.opcode = pack->mPacket.opcode;
	mPacket.len = 0;
	while (mPacket.len < pack->mPacket.len)
	{
		mPacket.data[mPacket.len] = pack->mPacket.data[mPacket.len];
		mPacket.len++;
	}
}

bool Packet::Compress(void)
{
	if (mPacket.opcode == SMSG_UPDATE_OBJECT)
	{
		Compressor compressor;
		pair<Byte *, long> cdata;
		long i;

		// First, simply compress the data
		if (!compressor.Compress(mPacket.data, mPacket.len))
			return false;

		// Copy the original len into the first 2 bytes (Word)
		memcpy(mPacket.data, &(mPacket.len), 2);
		// Set the next two bytes to zeros (4 byte orig len even tho packets are
		// restricted to being a Word in size, odd protocol quirk)
		mPacket.data[2] = mPacket.data[3] = 0x00;
		mPacket.len = 4;

		// Now copy the compressed data into the packet.
		cdata = compressor.GetOutput();
		for (i = 0; i < cdata.second; i++)
			AddByte(cdata.first[i]);

		// Finally, change the opcode
		mPacket.opcode = SMSG_COMPRESSED_UPDATE_OBJECT;

		// We compressed the packet.
		return true;
	}

	// Don't know how to compress this opcode
	return false;
}

const char *Packet::GetOpCodeStr(void)
{
	static const char *MsgToStr[] = {
		"",
		"CMSG_BOOTME",
		"CMSG_DBLOOKUP",
		"SMSG_DBLOOKUP",
		"CMSG_QUERY_OBJECT_POSITION",
		"SMSG_QUERY_OBJECT_POSITION",
		"CMSG_QUERY_OBJECT_ROTATION",
		"SMSG_QUERY_OBJECT_ROTATION",
		"CMSG_WORLD_TELEPORT",
		"CMSG_TELEPORT_TO_PLAYER",
		"CMSG_ZONE_MAP",
		"SMSG_ZONE_MAP",
		"CMSG_DEBUG_CHANGECELLZONE",
		"CMSG_EMBLAZON_TABARD_OBSOLETE",
		"CMSG_UNEMBLAZON_TABARD_OBSOLETE",
		"CMSG_RECHARGE",
		"CMSG_LEARN_SPELL",
		"CMSG_CREATEMONSTER",
		"CMSG_DESTROYMONSTER",
		"CMSG_CREATEITEM",
		"CMSG_CREATEGAMEOBJECT",
		"CMSG_MAKEMONSTERATTACKME",
		"CMSG_MAKEMONSTERATTACKGUID",
		"CMSG_ENABLEDEBUGCOMBATLOGGING",
		"CMSG_FORCEACTION",
		"CMSG_FORCEACTIONONOTHER",
		"CMSG_FORCEACTIONSHOW",
		"SMSG_FORCEACTIONSHOW",
		"SMSG_ATTACKERSTATEUPDATEDEBUGINFO",
		"SMSG_ATTACKERSTATEUPDATEDEBUGINFOSPELL",
		"SMSG_ATTACKERSTATEUPDATEDEBUGINFOSPELLMISS",
		"SMSG_DEBUG_PLAYER_RANGE",
		"CMSG_UNDRESSPLAYER",
		"CMSG_BEASTMASTER",
		"CMSG_GODMODE",
		"SMSG_GODMODE",
		"CMSG_CHEAT_SETMONEY",
		"CMSG_LEVEL_CHEAT",
		"CMSG_PET_LEVEL_CHEAT",
		"CMSG_LEVELUP_CHEAT",
		"CMSG_COOLDOWN_CHEAT",
		"CMSG_USE_SKILL_CHEAT",
		"CMSG_FLAG_QUEST",
		"CMSG_FLAG_QUEST_FINISH",
		"CMSG_CLEAR_QUEST",
		"CMSG_SEND_EVENT",
		"CMSG_DEBUG_AISTATE",
		"SMSG_DEBUG_AISTATE",
		"CMSG_ENABLE_PVP",
		"CMSG_ADVANCE_SPAWN_TIME",
		"CMSG_PVP_PORT",
		"CMSG_AUTH_SRP6_BEGIN",
		"CMSG_AUTH_SRP6_PROOF",
		"CMSG_AUTH_SRP6_RECODE",
		"CMSG_CHAR_CREATE",
		"CMSG_CHAR_ENUM",
		"CMSG_CHAR_DELETE",
		"SMSG_AUTH_SRP6_RESPONSE",
		"SMSG_CHAR_CREATE",
		"SMSG_CHAR_ENUM",
		"SMSG_CHAR_DELETE",
		"CMSG_PLAYER_LOGIN",
		"SMSG_NEW_WORLD",
		"SMSG_TRANSFER_PENDING",
		"SMSG_TRANSFER_ABORTED",
		"SMSG_CHARACTER_LOGIN_FAILED",
		"SMSG_LOGIN_SETTIMESPEED",
		"SMSG_GAMETIME_UPDATE",
		"CMSG_GAMETIME_SET",
		"SMSG_GAMETIME_SET",
		"CMSG_GAMESPEED_SET",
		"SMSG_GAMESPEED_SET",
		"CMSG_SERVERTIME",
		"SMSG_SERVERTIME",
		"CMSG_PLAYER_LOGOUT",
		"CMSG_LOGOUT_REQUEST",
		"SMSG_LOGOUT_RESPONSE",
		"SMSG_LOGOUT_COMPLETE",
		"CMSG_LOGOUT_CANCEL",
		"SMSG_LOGOUT_CANCEL_ACK",
		"CMSG_NAME_QUERY",
		"SMSG_NAME_QUERY_RESPONSE",
		"CMSG_PET_NAME_QUERY",
		"SMSG_PET_NAME_QUERY_RESPONSE",
		"CMSG_GUILD_QUERY",
		"SMSG_GUILD_QUERY_RESPONSE",
		"CMSG_ITEM_QUERY_SINGLE",
		"CMSG_ITEM_QUERY_MULTIPLE",
		"SMSG_ITEM_QUERY_SINGLE_RESPONSE",
		"SMSG_ITEM_QUERY_MULTIPLE_RESPONSE",
		"CMSG_PAGE_TEXT_QUERY",
		"SMSG_PAGE_TEXT_QUERY_RESPONSE",
		"CMSG_QUEST_QUERY",
		"SMSG_QUEST_QUERY_RESPONSE",
		"CMSG_GAMEOBJECT_QUERY",
		"SMSG_GAMEOBJECT_QUERY_RESPONSE",
		"CMSG_CREATURE_QUERY",
		"SMSG_CREATURE_QUERY_RESPONSE",
		"CMSG_WHO",
		"SMSG_WHO",
		"CMSG_WHOIS",
		"SMSG_WHOIS",
		"CMSG_FRIEND_LIST",
		"SMSG_FRIEND_LIST",
		"SMSG_FRIEND_STATUS",
		"CMSG_ADD_FRIEND",
		"CMSG_DEL_FRIEND",
		"SMSG_IGNORE_LIST",
		"CMSG_ADD_IGNORE",
		"CMSG_DEL_IGNORE",
		"CMSG_GROUP_INVITE",
		"SMSG_GROUP_INVITE",
		"CMSG_GROUP_CANCEL",
		"SMSG_GROUP_CANCEL",
		"CMSG_GROUP_ACCEPT",
		"CMSG_GROUP_DECLINE",
		"SMSG_GROUP_DECLINE",
		"CMSG_GROUP_UNINVITE",
		"CMSG_GROUP_UNINVITE_GUID",
		"SMSG_GROUP_UNINVITE",
		"CMSG_GROUP_SET_LEADER",
		"SMSG_GROUP_SET_LEADER",
		"CMSG_LOOT_METHOD",
		"CMSG_GROUP_DISBAND",
		"SMSG_GROUP_DESTROYED",
		"SMSG_GROUP_LIST",
		"SMSG_PARTY_MEMBER_STATS",
		"SMSG_PARTY_COMMAND_RESULT",
		"UMSG_UPDATE_GROUP_MEMBERS",
		"CMSG_GUILD_CREATE",
		"CMSG_GUILD_INVITE",
		"SMSG_GUILD_INVITE",
		"CMSG_GUILD_ACCEPT",
		"CMSG_GUILD_DECLINE",
		"SMSG_GUILD_DECLINE",
		"CMSG_GUILD_INFO",
		"SMSG_GUILD_INFO",
		"CMSG_GUILD_ROSTER",
		"SMSG_GUILD_ROSTER",
		"CMSG_GUILD_PROMOTE",
		"CMSG_GUILD_DEMOTE",
		"CMSG_GUILD_LEAVE",
		"CMSG_GUILD_REMOVE",
		"CMSG_GUILD_DISBAND",
		"CMSG_GUILD_LEADER",
		"CMSG_GUILD_MOTD",
		"SMSG_GUILD_EVENT",
		"SMSG_GUILD_COMMAND_RESULT",
		"UMSG_UPDATE_GUILD",
		"CMSG_MESSAGECHAT",
		"SMSG_MESSAGECHAT",
		"CMSG_JOIN_CHANNEL",
		"CMSG_LEAVE_CHANNEL",
		"SMSG_CHANNEL_NOTIFY",
		"CMSG_CHANNEL_LIST",
		"SMSG_CHANNEL_LIST",
		"CMSG_CHANNEL_PASSWORD",
		"CMSG_CHANNEL_SET_OWNER",
		"CMSG_CHANNEL_OWNER",
		"CMSG_CHANNEL_MODERATOR",
		"CMSG_CHANNEL_UNMODERATOR",
		"CMSG_CHANNEL_MUTE",
		"CMSG_CHANNEL_UNMUTE",
		"CMSG_CHANNEL_INVITE",
		"CMSG_CHANNEL_KICK",
		"CMSG_CHANNEL_BAN",
		"CMSG_CHANNEL_UNBAN",
		"CMSG_CHANNEL_ANNOUNCEMENTS",
		"CMSG_CHANNEL_MODERATE",
		"SMSG_UPDATE_OBJECT",
		"SMSG_DESTROY_OBJECT",
		"CMSG_USE_ITEM",
		"CMSG_OPEN_ITEM",
		"CMSG_READ_ITEM",
		"SMSG_READ_ITEM_OK",
		"SMSG_READ_ITEM_FAILED",
		"SMSG_ITEM_COOLDOWN",
		"CMSG_GAMEOBJ_USE",
		"CMSG_GAMEOBJ_CHAIR_USE_OBSOLETE",
		"SMSG_GAMEOBJECT_CUSTOM_ANIM",
		"CMSG_AREATRIGGER",
		"MSG_MOVE_START_FORWARD",
		"MSG_MOVE_START_BACKWARD",
		"MSG_MOVE_STOP",
		"MSG_MOVE_START_STRAFE_LEFT",
		"MSG_MOVE_START_STRAFE_RIGHT",
		"MSG_MOVE_STOP_STRAFE",
		"MSG_MOVE_JUMP",
		"MSG_MOVE_START_TURN_LEFT",
		"MSG_MOVE_START_TURN_RIGHT",
		"MSG_MOVE_STOP_TURN",
		"MSG_MOVE_START_PITCH_UP",
		"MSG_MOVE_START_PITCH_DOWN",
		"MSG_MOVE_STOP_PITCH",
		"MSG_MOVE_SET_RUN_MODE",
		"MSG_MOVE_SET_WALK_MODE",
		"MSG_MOVE_TOGGLE_LOGGING",
		"MSG_MOVE_TELEPORT",
		"MSG_MOVE_TELEPORT_CHEAT",
		"MSG_MOVE_TELEPORT_ACK",
		"MSG_MOVE_TOGGLE_FALL_LOGGING",
		"MSG_MOVE_COLLIDE_REDIRECT",
		"MSG_MOVE_COLLIDE_STUCK",
		"MSG_MOVE_START_SWIM",
		"MSG_MOVE_STOP_SWIM",
		"MSG_MOVE_SET_RUN_SPEED_CHEAT",
		"MSG_MOVE_SET_RUN_SPEED",
		"MSG_MOVE_SET_WALK_SPEED_CHEAT",
		"MSG_MOVE_SET_WALK_SPEED",
		"MSG_MOVE_SET_SWIM_SPEED_CHEAT",
		"MSG_MOVE_SET_SWIM_SPEED",
		"MSG_MOVE_SET_ALL_SPEED_CHEAT",
		"MSG_MOVE_SET_TURN_RATE_CHEAT",
		"MSG_MOVE_SET_TURN_RATE",
		"MSG_MOVE_TOGGLE_COLLISION_CHEAT",
		"MSG_MOVE_SET_FACING",
		"MSG_MOVE_SET_PITCH",
		"MSG_MOVE_WORLDPORT_ACK",
		"SMSG_MONSTER_MOVE",
		"MSG_MOVE_RESERVED_0",
		"MSG_MOVE_RESERVED_1",
		"MSG_MOVE_RESERVED_2",
		"MSG_MOVE_RESERVED_3",
		"SMSG_FORCE_SPEED_CHANGE",
		"CMSG_FORCE_SPEED_CHANGE_ACK",
		"SMSG_FORCE_SWIM_SPEED_CHANGE",
		"CMSG_FORCE_SWIM_SPEED_CHANGE_ACK",
		"SMSG_FORCE_MOVE_ROOT",
		"CMSG_FORCE_MOVE_ROOT_ACK",
		"SMSG_FORCE_MOVE_UNROOT",
		"CMSG_FORCE_MOVE_UNROOT_ACK",
		"MSG_MOVE_ROOT",
		"MSG_MOVE_UNROOT",
		"MSG_MOVE_HEARTBEAT",
		"CMSG_STUCK_OBSOLETE",
		"CMSG_TRIGGER_CINEMATIC_CHEAT",
		"CMSG_OPENING_CINEMATIC",
		"SMSG_TRIGGER_CINEMATIC",
		"CMSG_NEXT_CINEMATIC_CAMERA",
		"CMSG_COMPLETE_CINEMATIC",
		"SMSG_TUTORIAL_FLAGS",
		"CMSG_TUTORIAL_SHOWN",
		"CMSG_TUTORIAL_CLEAR",
		"CMSG_TUTORIAL_RESET",
		"CMSG_STANDSTATECHANGE",
		"CMSG_EMOTE",
		"SMSG_EMOTE",
		"CMSG_TEXT_EMOTE",
		"SMSG_TEXT_EMOTE",
		"CMSG_AUTOEQUIP_GROUND_ITEM",
		"CMSG_AUTOSTORE_GROUND_ITEM",
		"CMSG_AUTOSTORE_LOOT_ITEM",
		"CMSG_STORE_LOOT_IN_SLOT",
		"CMSG_AUTOEQUIP_ITEM",
		"CMSG_AUTOSTORE_BAG_ITEM",
		"CMSG_SWAP_ITEM",
		"CMSG_SWAP_INV_ITEM",
		"CMSG_SPLIT_ITEM",
		"CMSG_PICKUP_ITEM",
		"CMSG_DROP_ITEM",
		"CMSG_DESTROYITEM",
		"SMSG_INVENTORY_CHANGE_FAILURE",
		"SMSG_OPEN_CONTAINER",
		"CMSG_INSPECT",
		"SMSG_INSPECT",
		"CMSG_INITIATE_TRADE",
		"CMSG_BEGIN_TRADE",
		"CMSG_BUSY_TRADE",
		"CMSG_IGNORE_TRADE",
		"CMSG_ACCEPT_TRADE",
		"CMSG_UNACCEPT_TRADE",
		"CMSG_CANCEL_TRADE",
		"CMSG_SET_TRADE_ITEM",
		"CMSG_CLEAR_TRADE_ITEM",
		"CMSG_SET_TRADE_GOLD",
		"SMSG_TRADE_STATUS",
		"SMSG_TRADE_STATUS_EXTENDED",
		"SMSG_INITIALIZE_FACTIONS",
		"SMSG_SET_FACTION_VISIBLE",
		"SMSG_SET_FACTION_STANDING",
		"CMSG_SET_FACTION_ATWAR",
		"CMSG_SET_FACTION_CHEAT",
		"SMSG_SET_PROFICIENCY",
		"CMSG_SET_ACTION_BUTTON",
		"SMSG_ACTION_BUTTONS",
		"SMSG_INITIAL_SPELLS",
		"SMSG_LEARNED_SPELL",
		"SMSG_SUPERCEDED_SPELL",
		"CMSG_NEW_SPELL_SLOT",
		"CMSG_CAST_SPELL",
		"CMSG_CANCEL_CAST",
		"SMSG_CAST_RESULT",
		"SMSG_SPELL_START",
		"SMSG_SPELL_GO",
		"SMSG_SPELL_FAILURE",
		"SMSG_SPELL_COOLDOWN",
		"SMSG_COOLDOWN_EVENT",
		"CMSG_CANCEL_AURA",
		"SMSG_UPDATE_AURA_DURATION",
		"SMSG_PET_CAST_FAILED",
		"MSG_CHANNEL_START",
		"MSG_CHANNEL_UPDATE",
		"CMSG_CANCEL_CHANNELLING",
		"SMSG_AI_REACTION",
		"CMSG_SET_SELECTION",
		"CMSG_SET_TARGET",
		"CMSG_START_USING_RANGED_WEAPON",
		"CMSG_STOP_USING_RANGED_WEAPON",
		"CMSG_ATTACKSWING",
		"CMSG_ATTACKSTOP",
		"SMSG_ATTACKSTART",
		"SMSG_ATTACKSTOP",
		"SMSG_ATTACKSWING_NOTINRANGE",
		"SMSG_ATTACKSWING_BADFACING",
		"SMSG_ATTACKSWING_NOTSTANDING",
		"SMSG_ATTACKSWING_DEADTARGET",
		"SMSG_ATTACKSWING_CANT_ATTACK",
		"SMSG_ATTACKERSTATEUPDATE",
		"SMSG_VICTIMSTATEUPDATE_OBSOLETE",
		"SMSG_DAMAGE_DONE",
		"SMSG_DAMAGE_TAKEN",
		"SMSG_CANCEL_COMBAT",
		"SMSG_PLAYER_COMBAT_XP_GAIN_OBSOLETE",
		"SMSG_HEALSPELL_ON_PLAYER",
		"SMSG_HEALSPELL_ON_PLAYERS_PET",
		"CMSG_SHEATHE",
		"CMSG_SAVE_PLAYER",
		"CMSG_SETDEATHBINDPOINT",
		"SMSG_BINDPOINTUPDATE",
		"CMSG_GETDEATHBINDZONE",
		"SMSG_BINDZONEREPLY",
		"SMSG_PLAYERBOUND",
		"SMSG_DEATH_NOTIFY",
		"CMSG_REPOP_REQUEST",
		"SMSG_RESURRECT_REQUEST",
		"CMSG_RESURRECT_RESPONSE",
		"CMSG_LOOT",
		"CMSG_LOOT_MONEY",
		"CMSG_LOOT_RELEASE",
		"SMSG_LOOT_RESPONSE",
		"SMSG_LOOT_RELEASE_RESPONSE",
		"SMSG_LOOT_REMOVED",
		"SMSG_LOOT_MONEY_NOTIFY",
		"SMSG_LOOT_ITEM_NOTIFY",
		"SMSG_LOOT_CLEAR_MONEY",
		"SMSG_ITEM_PUSH_RESULT",
		"SMSG_DUEL_REQUESTED",
		"SMSG_DUEL_OUTOFBOUNDS",
		"SMSG_DUEL_INBOUNDS",
		"SMSG_DUEL_COMPLETE",
		"SMSG_DUEL_WINNER",
		"CMSG_DUEL_ACCEPTED",
		"CMSG_DUEL_CANCELLED",
		"SMSG_MOUNTRESULT",
		"SMSG_DISMOUNTRESULT",
		"SMSG_PUREMOUNT_CANCELLED",
		"CMSG_MOUNTSPECIAL_ANIM",
		"SMSG_MOUNTSPECIAL_ANIM",
		"SMSG_PET_TAME_FAILURE",
		"CMSG_PET_SET_ACTION",
		"CMSG_PET_ACTION",
		"CMSG_PET_ABANDON",
		"CMSG_PET_RENAME",
		"SMSG_PET_NAME_INVALID",
		"SMSG_PET_SPELLS",
		"CMSG_PET_CAST_SPELL_OBSOLETE",
		"CMSG_LIST_INVENTORY",
		"SMSG_LIST_INVENTORY",
		"CMSG_SELL_ITEM",
		"SMSG_SELL_ITEM",
		"CMSG_BUY_ITEM",
		"CMSG_BUY_ITEM_IN_SLOT",
		"SMSG_BUY_ITEM",
		"SMSG_BUY_FAILED",
		"CMSG_NPC_HELLO",
		"SMSG_NPC_HYPERTEXT",
		"CMSG_NPC_TEXT_QUERY",
		"SMSG_NPC_TEXT_UPDATE",
		"CMSG_NPC_OFFER_ITEM",
		"SMSG_NPC_ACCEPT_ITEM",
		"SMSG_NPC_DECLINE_ITEM",
		"SMSG_NPC_WONT_TALK",
		"CMSG_QUESTGIVER_STATUS_QUERY",
		"SMSG_QUESTGIVER_STATUS",
		"CMSG_QUESTGIVER_HELLO",
		"SMSG_QUESTGIVER_QUEST_LIST",
		"CMSG_QUESTGIVER_QUERY_QUEST",
		"CMSG_QUESTGIVER_QUEST_AUTOLAUNCH",
		"SMSG_QUESTGIVER_QUEST_DETAILS",
		"CMSG_QUESTGIVER_ACCEPT_QUEST",
		"CMSG_QUESTGIVER_COMPLETE_QUEST",
		"SMSG_QUESTGIVER_REQUEST_ITEMS",
		"CMSG_QUESTGIVER_REQUEST_REWARD",
		"SMSG_QUESTGIVER_OFFER_REWARD",
		"CMSG_QUESTGIVER_CHOOSE_REWARD",
		"SMSG_QUESTGIVER_QUEST_INVALID",
		"CMSG_QUESTGIVER_CANCEL",
		"SMSG_QUESTGIVER_QUEST_COMPLETE",
		"SMSG_QUESTGIVER_QUEST_FAILED",
		"CMSG_QUESTLOG_SWAP_QUEST",
		"CMSG_QUESTLOG_REMOVE_QUEST",
		"SMSG_QUESTLOG_FULL",
		"SMSG_QUESTUPDATE_FAILED",
		"SMSG_QUESTUPDATE_COMPLETE",
		"SMSG_QUESTUPDATE_ADD_KILL",
		"SMSG_QUESTUPDATE_ADD_ITEM",
		"CMSG_QUEST_CONFIRM_ACCEPT",
		"SMSG_QUEST_CONFIRM_ACCEPT",
		"CMSG_TAXICLEARALLNODES",
		"CMSG_TAXIENABLEALLNODES",
		"CMSG_TAXISHOWNODES",
		"SMSG_SHOWTAXINODES",
		"CMSG_TAXINODE_STATUS_QUERY",
		"SMSG_TAXINODE_STATUS",
		"CMSG_TAXIQUERYAVAILABLENODES",
		"CMSG_ACTIVATETAXI",
		"SMSG_ACTIVATETAXIREPLY",
		"SMSG_NEW_TAXI_PATH",
		"CMSG_TRAINER_LIST",
		"SMSG_TRAINER_LIST",
		"CMSG_TRAINER_BUY_SPELL",
		"SMSG_TRAINER_BUY_SUCCEEDED",
		"SMSG_TRAINER_BUY_FAILED",
		"CMSG_BINDER_ACTIVATE",
		"SMSG_PLAYERBINDERROR",
		"CMSG_BANKER_ACTIVATE",
		"SMSG_SHOW_BANK",
		"CMSG_BUY_BANK_SLOT",
		"SMSG_BUY_BANK_SLOT_RESULT",
		"CMSG_PETITION_SHOWLIST",
		"SMSG_PETITION_SHOWLIST",
		"CMSG_PETITION_BUY",
		"CMSG_PETITION_SHOW_SIGNATURES",
		"SMSG_PETITION_SHOW_SIGNATURES",
		"CMSG_PETITION_SIGN",
		"SMSG_PETITION_SIGN_RESULTS",
		"CMSG_OFFER_PETITION",
		"CMSG_TURN_IN_PETITION",
		"SMSG_TURN_IN_PETITION_RESULTS",
		"CMSG_PETITION_QUERY",
		"SMSG_PETITION_QUERY_RESPONSE",
		"SMSG_FISH_NOT_HOOKED",
		"SMSG_FISH_ESCAPED",
		"CMSG_BUG",
		"SMSG_NOTIFICATION",
		"CMSG_PLAYED_TIME",
		"SMSG_PLAYED_TIME",
		"CMSG_QUERY_TIME",
		"SMSG_QUERY_TIME_RESPONSE",
		"SMSG_LOG_XPGAIN",
		"MSG_SPLIT_MONEY",
		"CMSG_RECLAIM_CORPSE",
		"CMSG_WRAP_ITEM",
		"SMSG_LEVELUP_INFO",
		"MSG_MINIMAP_PING",
		"SMSG_RESISTLOG",
		"SMSG_ENCHANTMENTLOG",
		"CMSG_SET_SKILL_CHEAT",
		"SMSG_START_MIRROR_TIMER",
		"SMSG_PAUSE_MIRROR_TIMER",
		"SMSG_STOP_MIRROR_TIMER",
		"CMSG_PING",
		"SMSG_PONG",
		"SMSG_CLEAR_COOLDOWN",
		"SMSG_GAMEOBJECT_PAGETEXT",
		"CMSG_SETWEAPONMODE",
		"SMSG_COOLDOWN_CHEAT",
		"SMSG_SPELL_DELAYED",
		"CMSG_PLAYER_MACRO",
		"SMSG_PLAYER_MACRO",
		"CMSG_GHOST",
		"CMSG_GM_INVIS",
		"CMSG_SCREENSHOT",
		"MSG_GM_BIND_OTHER",
		"MSG_GM_SUMMON",
		"SMSG_ITEM_TIME_UPDATE",
		"SMSG_ITEM_ENCHANT_TIME_UPDATE",
		"SMSG_AUTH_CHALLENGE",
		"CMSG_AUTH_SESSION",
		"SMSG_AUTH_RESPONSE",
		"MSG_GM_SHOWLABEL",
		"MSG_ADD_DYNAMIC_TARGET",
		"MSG_SAVE_GUILD_EMBLEM",
		"MSG_TABARDVENDOR_ACTIVATE",
		"SMSG_PLAY_SPELL_VISUAL",
		"CMSG_ZONEUPDATE",
		"SMSG_PARTYKILLLOG",
		"SMSG_COMPRESSED_UPDATE_OBJECT",
		"SMSG_MIRRORTIMERDAMAGELOG",
		"SMSG_EXPLORATION_EXPERIENCE",
		"CMSG_GM_SET_SECURITY_GROUP",
		"CMSG_GM_NUKE",
		"MSG_RANDOM_ROLL",
		"SMSG_ENVIRONMENTALDAMAGELOG",
		"CMSG_RWHOIS",
		"SMSG_RWHOIS",
		"MSG_LOOKING_FOR_GROUP",
		"CMSG_SET_LOOKING_FOR_GROUP"
	};

	return MsgToStr[mPacket.opcode];
}